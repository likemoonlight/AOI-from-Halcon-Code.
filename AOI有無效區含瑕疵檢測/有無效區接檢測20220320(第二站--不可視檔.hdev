<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.11.2.0">
<procedure name="main">
<interface/>
<body>
<l>dev_update_off() //關掉視窗更新</l>
<l>Path:='C:/Users/Jason/Desktop/有無效區/0320/03'</l>
<l>Path_2:='C:/Users/Jason/Desktop/有無效區/'</l>
<c>*///////////讀取檔案pic///////////////////////////////////////////</c>
<l>* read_image (Img, Path+'06/(1).bmp')</l>
<l>* read_image (Img, Path_2+'0320/01/(21).jpg')</l>
<c>*//  White_with_Black_4000_num := 1</c>
<c>*// White_4000_num:=1</c>
<c>*//  White_num:=2</c>
<c>*/////////////////////////////////////////////////////////////////</c>
<c>*//////////////////////Parameters////////////////</c>
<c>*////////////////Set 有無效區 Parameters////////////////</c>
<l>Threshold_para:= 30</l>
<c>*////檢測VM區與BM區的閥值 //30</c>
<l>closing_circle_para:=25</l>
<c>*////修正VM區與BM區交界的閥值 //25</c>
<l>Set_Source_Image:=3</l>
<c>*///case 1:原圖、case 2:增強圖、case 3:增強圖///</c>
<l>White_nums_thres1:=13</l>
<l>White_nums_thres2:=28</l>
<l>White_nums_thres3:=33</l>
<c>*////檢測VM區與BM區間隔的閥值 //10//19//30</c>
<l>White_with_Black_nums_thres1:=0</l>
<l>White_with_Black_nums_thres2:=1</l>
<l>White_with_Black_nums_thres3:=2</l>
<c>*////檢測VM區與BM區交界的閥值 //0//1//2</c>
<c>*//////////Set logistic Parameters////////////</c>
<l>White_in_up := false</l>
<l>White_in_left := false</l>
<c>*////"連續"區分有無效區的初始邏輯 //false//依照Index</c>
<l>Black_range:=3500</l>
<l>White_range:=3500</l>
<l>White_num := 0</l>
<l>Black_num := 0</l>
<l>Black_4000_num := 0</l>
<l>White_4000_num := 0</l>
<l>White_with_Black_4000_num := 0</l>
<c>*///////////////////////////////////////////////</c>
<c>*////////////////Set 二站檢測 Parameters////////////////</c>
<l>White_thres1:=10</l>
<l>White_thres2:=250     </l>
<c>*////檢測濺墨程度的閥值 //10//240</c>
<l>Sawtooth_thres1:=0    </l>
<l>Sawtooth_thres2:=200   </l>
<c>*////鋸齒範圍的閥值 //10//200</c>
<l>Sawtooth_thres3:=1    </l>
<l>Sawtooth_thres4:=11   </l>
<c>*////檢測鋸齒程度的閥值 //1//黑白間鋸齒//11</c>
<l>Sawtooth_thres5:=4.5  </l>
<c>*////鋸齒面積的閥值 //4.5</c>
<l>Black_thres1:=40      </l>
<l>Black_thres2:=255     </l>
<c>*////檢測漏光程度的閥值 //35//255</c>
<l>Black_thres3:=1000000</l>
<l>Black_thres4:=2600   </l>
<c>*////漏光面積的閥值 //1000000//2600</c>
<l>Sawtooth_ICON1:=20   </l>
<l>Sawtooth_ICON2:=200   </l>
<c>*////檢測ICON的閥值 //20//200</c>
<l>Sawtooth_ICON3:=1    </l>
<l>Sawtooth_ICON4:=3     </l>
<c>*////檢測ICON鋸齒程度的閥值 //1//3</c>
<l>Sawtooth_ICON5:=5    </l>
<c>*////ICON鋸齒面積的閥值 //5</c>
<l>ICON_Inside_thres1:=80</l>
<l>ICON_Inside_thres2:=255</l>
<c>*////檢測ICON內的閥值 //120//255</c>
<l>ICON_Inside_thres3:=0</l>
<l>ICON_Inside_thres4:=105 </l>
<c>*////檢測ICON內濺墨的閥值 //0//80</c>
<l>ICON_Inside_Object_Area:=1600</l>
<c>*////ICON內面積的閥值 //1800//2600</c>
<c>*///////////////////////////////////////////////</c>
<c>*/////////////////////////////////////////////////////////////////</c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files (Path, ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index_pic := 0 to |ImageFiles| - 1 by 1</l>
<l>    read_image (Img, ImageFiles[Index_pic])</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">* Image Acquisition 01: Do something</c>
<c>*/////////////////////////////////////////////////////////////////</c>
<l>gen_empty_obj(ImagePart)</l>
<l>gen_empty_obj(ImagePart2)</l>
<l>gen_empty_obj(Image_sawtooth)</l>
<l>White_array:=[] //清空參數(避免連續運算時的前後干擾)</l>
<l> Class2_Number:=0     //瑕疵數量</l>
<l>  Class2_height:=[]  //高</l>
<l>  Class2_width:=[]  //寬</l>
<l>  Class2_Ratio:=[] //寬高比</l>
<l>  Class2_area:=[] //面積</l>
<l>  Class2_centerX:=[]</l>
<l>  Class2_centerY:=[] //中心座標  </l>
<l>  White_ObjectSelect_row:=0</l>
<l>  White_ObjectSelect_column:=0</l>
<l>  sawtooh_ObjectSelect_row:=0</l>
<l>  sawtooh_ObjectSelect_column:=0</l>
<l>  Black_Object_column:=0</l>
<l>  Black_Object_row:=0</l>
<l>  ICON_column1:=0</l>
<l>  ICON_column2:=0</l>
<l>  ICON_row1:=0</l>
<l>  ICON_row2:=0</l>
<l>  ICON_Detect_Area:=0</l>
<c>*/////////////////////////////////////////////////////////////////</c>
<l>if(White_num&gt;White_nums_thres1 and White_num&lt;White_nums_thres2 and White_with_Black_4000_num&gt;White_with_Black_nums_thres1)</l>
<l>        White_in_up:=true</l>
<l>elseif(White_num&gt;White_nums_thres2 and White_num&lt;White_nums_thres3 and White_with_Black_4000_num&gt;White_with_Black_nums_thres2)</l>
<l>        White_in_up:=false</l>
<l>elseif(White_num&gt;White_nums_thres3 and White_with_Black_4000_num&gt;White_with_Black_nums_thres3)</l>
<l>        White_in_up:=true</l>
<l>endif</l>
<c>*///////////計算區域與長寬/////////////////////////////////////////</c>
<l>height_width_ratio(Img, Height, Width, Ratio) </l>
<c>                 *////////512////4096////////</c>
<l>gen_rectangle1 (Pic_size, 0, 0, Height, Width)</l>
<c>*/////////////////////////////////////////////////////////////////</c>
<c>*///////////圖像增強</c>
<l>scale_image_max(Img, ImageScaleMax)</l>
<l>mean_image(ImageScaleMax, ImageMean, 5, 5)</l>
<l>median_image(ImageMean, ImageMedian, 'square', 3, 'mirrored')</l>
<l>threshold (ImageMedian, Region, 0, Threshold_para)</l>
<c>*/////////////////Source Image//////////////////////////////</c>
<l>switch (Set_Source_Image)</l>
<l>  case 1:</l>
<l>    Source_Pic:=Img</l>
<l>    break</l>
<l>  case 2:</l>
<l>    Source_Pic:=ImageScaleMax</l>
<l>    break  </l>
<l>  case 3:</l>
<l>    Source_Pic:=ImageMedian</l>
<l>    break  </l>
<l>endswitch</l>
<c>*////////////////White and Black///////////////////////////</c>
<l>close_fill_select_shape(Region, RegionClosing, RegionFillUp, ConnectedRegions, SelectedRegions, SelectedRegion0, closing_circle_para)</l>
<l>symm_select_shape(Pic_size, SelectedRegion0, ROI_0, ConnectedRegions1, SelectedRegion1, SelectedRegion2)</l>
<l>count_obj(SelectedRegion0, Number)</l>
<l>count_obj(SelectedRegion2, Number1)</l>
<c>*/////////////////////////////////////////////////////</c>
<c>*/////////////////Logistic Function/////////////////////</c>
<c> *///////////////////Logistic (1)//////////////////// </c>
<l>if(Number&gt;0)</l>
<l>    Black_num := Black_num+1</l>
<l>  for Index := 1 to Number  by 1  </l>
<l>    Log_Black(SelectedRegion0, ObjectSelected1, Index, Area_Black1, Row_Black1, Column_Black1, Height_Black1, Width_Black1, Ratio_Black1)</l>
<l>    if(Width_Black1&gt;Black_range)</l>
<l>        Black_4000_num := Black_4000_num+1</l>
<l>    endif</l>
<c>   */////////////////////////////////////////////////</c>
<l>  endfor </l>
<l>endif</l>
<c> *///////////////////Logistic (2)//////////////////// </c>
<l>if(Number1&gt;0 and Number&lt;1)</l>
<l>    White_num := White_num+1</l>
<l>  for White_Index := 1 to Number1  by 1  </l>
<l>    Log_White (SelectedRegion2, White_ObjectSelected, White_Index, Height_White, Width_White, Ratio_White, Area_White, Row_White, Column_White)</l>
<l>    if(Width_White&gt;White_range)</l>
<l>        White_4000_num := White_4000_num+1</l>
<l>    endif</l>
<c>    */////////////////////////////////////////////////</c>
<l>    if(White_with_Black_4000_num &gt;1)</l>
<c>*/////////////////////For第2站檢測//////////////////////</c>
<l>       reduce_domain(Source_Pic,White_ObjectSelected,Mask)</l>
<l>       crop_domain(Mask, ImagePart2)</l>
<l>    endif</l>
<c>    */////////////////////////////////////////////////</c>
<l>  endfor </l>
<l>endif</l>
<c> *///////////////////Logistic (3)//////////////////// </c>
<l>if(Number1&gt;0 and Number=1)</l>
<l>    White_num := White_num+1</l>
<l>    White_array[Number1-1]:=0</l>
<l>  for White_Index := 1 to Number1  by 1  </l>
<l>    Log_White (SelectedRegion2, White_ObjectSelected, White_Index, Height_White, Width_White, Ratio_White, Area_White, Row_White, Column_White)</l>
<c>    *///////////////////測白邊</c>
<l>    if(Width_White&gt;White_range)</l>
<l>        White_4000_num := White_4000_num+1</l>
<l>    endif      </l>
<l>        Log_Black(SelectedRegion0, ObjectSelected1, 1, Area_Black1, Row_Black1, Column_Black1, Height_Black1, Width_Black1, Ratio_Black1)</l>
<c>            *///////////////////測黑邊與白黑</c>
<l>            if(Width_Black1&gt;Black_range)</l>
<l>              Black_4000_num := Black_4000_num+1</l>
<l>            endif</l>
<l>            if(Width_White&gt;White_range and Width_Black1&gt;Black_range)</l>
<l>                White_with_Black_4000_num := White_with_Black_4000_num + 1</l>
<l>            endif</l>
<c>            *///////////////////</c>
<l>        if(Height_White&gt;500 and Height_Black1&gt;500)//left and right</l>
<l>            if(Column_White&lt;Column_Black1 and White_in_left)</l>
<l>              White_array[White_Index-1]:=Number1</l>
<l>            elseif(Column_White&gt;Column_Black1 and White_in_left=false)</l>
<l>              White_array[White_Index-1]:=Number1 </l>
<l>            endif</l>
<c>      *///////////////////</c>
<l>        elseif(Width_White&gt;4000 and Width_Black1&gt;4000)//up and down</l>
<l>            if(Row_White&lt;Row_Black1 and White_in_up)</l>
<l>              White_array[White_Index-1]:=Number1</l>
<l>            elseif(Row_White&gt;Row_Black1 and White_in_up=false)</l>
<l>              White_array[White_Index-1]:=Number1 </l>
<l>            endif</l>
<c>      *///////////////////            </c>
<l>        elseif(Row_White&gt;Row_Black1 and Column_White&lt;Column_Black1 and White_in_up=false and White_in_left)//left and down            </l>
<l>              White_array[White_Index-1]:=Number1             </l>
<l>        elseif(Row_White&gt;Row_Black1 and Column_White&gt;Column_Black1 and White_in_up=false and White_in_left=false)//right and down             </l>
<l>              White_array[White_Index-1]:=Number1</l>
<l>        elseif(Row_White&lt;Row_Black1 and Column_White&lt;Column_Black1 and White_in_up and White_in_left)//left and up             </l>
<l>              White_array[White_Index-1]:=Number1            </l>
<l>        elseif(Row_White&lt;Row_Black1 and Column_White&gt;Column_Black1 and White_in_up and White_in_left=false)//right and up            </l>
<l>              White_array[White_Index-1]:=Number1            </l>
<l>        endif       </l>
<c>*/////////////////////////////////////////////////</c>
<l>   if(White_array[White_Index-1]&gt;0)</l>
<c>    */////////////////////////////////////////////////</c>
<l>     if(White_with_Black_4000_num&gt;0 and White_num&gt;1)</l>
<c>*/////////////////////For第二站檢測//////////////////////</c>
<l>       erosion_circle(White_ObjectSelected, ROI_White_ObjectSelected, closing_circle_para)</l>
<l>       reduce_domain(Source_Pic,ROI_White_ObjectSelected,Mask)</l>
<l>       region_features(ROI_White_ObjectSelected, 'row1', White_ObjectSelect_row)</l>
<l>       region_features(ROI_White_ObjectSelected, 'column1', White_ObjectSelect_column)</l>
<l>       crop_domain(Mask, ImagePart2)</l>
<l>       Region_Image_sawtooth (White_ObjectSelected, ImageScaleMax, ROI_sawtooth, ROI_sawtooth1, ROI_sawtooth2, sawtooh_Region, Mask, Image_sawtooth, smallest_Row, smallest_Column, smallest_Phi, smallest_Length1, smallest_Length2, sawtooh_ObjectSelect_row, sawtooh_ObjectSelect_column)</l>
<l>     endif </l>
<l>   endif </l>
<c>    */////////////////////////////////////////////////</c>
<l>  endfor </l>
<l>endif</l>
<c> *///////////////////Logistic (4)//////////////////// </c>
<l> if(Number1&gt;0 and Number&gt;1)</l>
<l>     White_num := White_num+1</l>
<l>    White_array[Number1-1]:=0</l>
<l>  for White_Index := 1 to Number1  by 1  </l>
<l>    Log_White (SelectedRegion2, White_ObjectSelected, White_Index, Height_White, Width_White, Ratio_White, Area_White, Row_White, Column_White)</l>
<c>    *///////////////////測白邊</c>
<l>    if(Width_White&gt;White_range)</l>
<l>        White_4000_num := White_4000_num+1</l>
<l>    endif      </l>
<l>        Log_Black(SelectedRegion0, ObjectSelected1, 1, Area_Black1, Row_Black1, Column_Black1, Height_Black1, Width_Black1, Ratio_Black1)</l>
<c>                *///////////////////</c>
<l>        Log_Black(SelectedRegion0, ObjectSelected2, 2, Area_Black2, Row_Black2, Column_Black2, Height_Black2, Width_Black2, Ratio_Black2)</l>
<c>            *///////////////////測黑邊</c>
<l>            if(Width_Black1&gt;Black_range or Width_Black2&gt;Black_range)</l>
<l>              Black_4000_num := Black_4000_num+1</l>
<l>            endif</l>
<c>            *///////////////////</c>
<l>        if(Height_White&gt;500 and Height_Black1&gt;500 and Height_Black2&gt;500)//left and right</l>
<l>            if(Column_White&lt;Column_Black1 and Column_White&lt;Column_Black2 and White_in_left)</l>
<l>              White_array[White_Index-1]:=Number1</l>
<l>            elseif(Column_White&gt;Column_Black1 and Column_White&gt;Column_Black2 and White_in_left=false)</l>
<l>              White_array[White_Index-1]:=Number1 </l>
<l>            endif</l>
<c>      *///////////////////</c>
<l>        elseif(Width_White&gt;4000 and Width_Black1&gt;4000 and Width_Black2&gt;4000)//up and down</l>
<l>            if(Row_White&lt;Row_Black1 and Row_White&lt;Row_Black2 and White_in_up)</l>
<l>              White_array[White_Index-1]:=Number1</l>
<l>            elseif(Row_White&gt;Row_Black1 and Row_White&gt;Row_Black2 and White_in_up=false)</l>
<l>              White_array[White_Index-1]:=Number1 </l>
<l>            endif</l>
<c>      *///////////////////            </c>
<l>        elseif(Row_White&gt;Row_Black1 and Row_White&gt;Row_Black2 and Column_White&lt;Column_Black1 and Column_White&lt;Column_Black2 and White_in_up=false and White_in_left)//left and down            </l>
<l>              White_array[White_Index-1]:=Number1             </l>
<l>        elseif(Row_White&gt;Row_Black1 and Row_White&gt;Row_Black2 and Column_White&gt;Column_Black1 and Column_White&gt;Column_Black2 and White_in_up=false and White_in_left=false)//right and down             </l>
<l>              White_array[White_Index-1]:=Number1</l>
<l>        elseif(Row_White&lt;Row_Black1 and Row_White&lt;Row_Black2 and Column_White&lt;Column_Black1 and Column_White&lt;Column_Black2 and White_in_up and White_in_left)//left and up             </l>
<l>              White_array[White_Index-1]:=Number1            </l>
<l>        elseif(Row_White&lt;Row_Black1 and Row_White&lt;Row_Black2 and Column_White&gt;Column_Black1 and Column_White&gt;Column_Black2 and White_in_up and White_in_left=false)//right and up            </l>
<l>              White_array[White_Index-1]:=Number1            </l>
<l>        endif       </l>
<c>*/////////////////////////////////////////////////</c>
<l>   if(White_array[White_Index-1]&gt;0)</l>
<c>    */////////////////////////////////////////////////</c>
<l>     if(White_with_Black_4000_num&gt;0 and White_num&gt;1)</l>
<c>*/////////////////////For第二站檢測//////////////////////</c>
<l>       erosion_circle(White_ObjectSelected, ROI_White_ObjectSelected, closing_circle_para)</l>
<l>       region_features(ROI_White_ObjectSelected, 'row1', White_ObjectSelect_row)</l>
<l>       region_features(ROI_White_ObjectSelected, 'column1', White_ObjectSelect_column)</l>
<l>       reduce_domain(Source_Pic,ROI_White_ObjectSelected,Mask)</l>
<l>       crop_domain(Mask, ImagePart2)</l>
<l>       Region_Image_sawtooth (White_ObjectSelected, ImageScaleMax, ROI_sawtooth, ROI_sawtooth1, ROI_sawtooth2, sawtooh_Region, Mask, Image_sawtooth, smallest_Row, smallest_Column, smallest_Phi, smallest_Length1, smallest_Length2, sawtooh_ObjectSelect_row1, sawtooh_ObjectSelect_column1)</l>
<c>    */////////////////////</c>
<l>     endif</l>
<l>   endif</l>
<c>    */////////////////////////////////////////////////</c>
<l>  endfor </l>
<l>endif</l>
<c>*/////////////////////////////////////////////////////////////////////////////////</c>
<c></c>
<c>  *////////////////////////////////////////////////</c>
<c>*///////////////////第二站檢測start//////////////////////</c>
<c>  *////////////////////////////////////////////////</c>
<c>*/////////////////////White檢測//////////////////////</c>
<c>  *////////////////////////////////////////////////</c>
<l>area_center(ImagePart2, Detect_Area, Detect_Row, Detect_Column)</l>
<l>if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>       threshold (ImagePart2, White_detect, White_thres1, White_thres2) //10//240</l>
<l>       connection(White_detect, White_Connected)</l>
<c>     *//////////運算瑕疵位置///////////</c>
<l>     area_center(White_Connected, Detect_Area, Detect_Row, Detect_Column)</l>
<l>     if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>       height_width_ratio(White_Connected, RegionsHeight, RegionsWidth, RegionsRatio) </l>
<c>       *獲取區域數量</c>
<l>       count_obj(White_Connected, RegionsNumber)</l>
<c>       *返回最小外接矩形(輸入區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>       smallest_rectangle1(White_Connected, Row1, Column1, Row2, Column2)</l>
<c>       *產生最小外接矩形(畫出的區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>       gen_rectangle1(White_Connected, Row1, Column1, Row2, Column2)</l>
<c>       *產生區域面積與中座標(畫出的區域，面積，(中心座標))</c>
<l>       area_center(White_Connected, RegionsArea, RegionsCenterRow, RegionsCenterColumn)</l>
<l>       RegionsCenterRow:=RegionsCenterRow+White_ObjectSelect_row-closing_circle_para+1</l>
<l>       RegionsCenterColumn:=RegionsCenterColumn+White_ObjectSelect_column-closing_circle_para+1                             </l>
<c>*/////////////////////回傳值//////////////////////</c>
<l>      if(RegionsNumber&gt;0)</l>
<l>         Print_data(Class2_Number, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY, Class2_height, Class2_width, RegionsNumber, RegionsHeight, RegionsWidth, RegionsRatio, RegionsArea, RegionsCenterRow, RegionsCenterColumn, Class2_Number_Out, Class2_Ratio_Out, Class2_area_Out, Class2_centerX_Out, Class2_centerY_Out, Class2_height_Out, Class2_width_Out, Class2_Number, Concat, Class2_height, Class2_width, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY)</l>
<l>      endif </l>
<l>    endif</l>
<l>endif</l>
<c>*/////////////////////第二站鋸齒檢測//////////////////////</c>
<l>  area_center(Image_sawtooth, Detect_Area, Detect_Row, Detect_Column)</l>
<l>  if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>    threshold (Image_sawtooth, Sawtooth_EdgeRegion00, Sawtooth_thres1, Sawtooth_thres2)</l>
<l>    connection(Sawtooth_EdgeRegion00, Sawtooth_Connected)</l>
<l>    select_shape (Sawtooth_Connected, Sawtooth_Selected1, 'area', 'and', 10000, 3e+06)</l>
<l>    fill_up(Sawtooth_Selected1,Sawtooth_Selected1)</l>
<l>    opening_rectangle1(Sawtooth_Selected1, Image_sawtooth01,Sawtooth_thres3,Sawtooth_thres3)//1</l>
<l>    opening_rectangle1(Sawtooth_Selected1, Image_sawtooth02,Sawtooth_thres4,Sawtooth_thres4)//11 </l>
<l>    symm_difference(Image_sawtooth01, Image_sawtooth02, sawtooh_Result)</l>
<l>    connection(sawtooh_Result, White_sawtooh_detect)</l>
<l>    select_shape (White_sawtooh_detect, Sawtooh_detect_Selected, 'area', 'and', Sawtooth_thres5, 10000) //4.5</l>
<c>    *//////////運算鋸齒位置///////////</c>
<l>    area_center(Sawtooh_detect_Selected, Detect_Area, Detect_Row, Detect_Column)</l>
<l>    if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>       height_width_ratio(Sawtooh_detect_Selected, RegionsHeight, RegionsWidth, RegionsRatio) </l>
<c>       *獲取區域數量</c>
<l>       count_obj(Sawtooh_detect_Selected, RegionsNumber)</l>
<c>       *返回最小外接矩形(輸入區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>       smallest_rectangle1(Sawtooh_detect_Selected, Row1, Column1, Row2, Column2)</l>
<c>       *產生最小外接矩形(畫出的區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>       gen_rectangle1(Sawtooh_detect_Selected, Row1, Column1, Row2, Column2)</l>
<c>       *產生區域面積與中座標(畫出的區域，面積，(中心座標))</c>
<l>       area_center(Sawtooh_detect_Selected, RegionsArea, RegionsCenterRow, RegionsCenterColumn)</l>
<l>       RegionsCenterRow:=RegionsCenterRow+sawtooh_ObjectSelect_row</l>
<l>       RegionsCenterColumn:=RegionsCenterColumn+sawtooh_ObjectSelect_column                                                      </l>
<c>*/////////////////////回傳值//////////////////////</c>
<l>      Print_data(Class2_Number, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY, Class2_height, Class2_width, RegionsNumber, RegionsHeight, RegionsWidth, RegionsRatio, RegionsArea, RegionsCenterRow, RegionsCenterColumn, Class2_Number_Out, Class2_Ratio_Out, Class2_area_Out, Class2_centerX_Out, Class2_centerY_Out, Class2_height_Out, Class2_width_Out, Class2_Number, Concat, Class2_height, Class2_width, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY)</l>
<l>    endif</l>
<l>  endif</l>
<c>  *////////////////////////////////////////////////</c>
<c>*/////////////////////Black檢測//////////////////////</c>
<c>  *////////////////////////////////////////////////</c>
<l>if(Number&gt;0)</l>
<l>  for Index := 1 to Number  by 1     </l>
<c>  *///////ICON檢測////////// </c>
<c>*/////Cut ICON image///////</c>
<l>    select_obj(SelectedRegion0, Black_ObjectSelected, Index)</l>
<l>    opening_circle(Black_ObjectSelected, ICON_Region,199)</l>
<l>    area_center(ICON_Region, Detect_Area, Detect_Row, Detect_Column)</l>
<l>    if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>      height_width_ratio(ICON_Region, ICON_Height, ICON_Width, ICON_Ratio)</l>
<l>      region_features(ICON_Region, 'row1', ICON_row1)</l>
<l>      region_features(ICON_Region, 'column1', ICON_column1)</l>
<l>      crop_part (Source_Pic, ICON_ImagePart, ICON_row1, ICON_column1+100, ICON_Width-200, ICON_Height)    </l>
<l>      threshold (ICON_ImagePart, ICON_Region2, 45, 255)</l>
<l>            area_center(ICON_Region2, ICON_Detect_Area, Detect_Row, Detect_Column)</l>
<l>        if(ICON_Detect_Area!=[] and ICON_Detect_Area!=0)</l>
<l>            height_width_ratio(ICON_Region2, ICON_Height2, ICON_Width2, ICON_Ratio2)</l>
<l>            region_features(ICON_Region2, 'row1', ICON_row2)</l>
<l>            region_features(ICON_Region2, 'column1', ICON_column2)</l>
<l>            crop_part (Source_Pic, Image_ICON, ICON_row1+ICON_row2, ICON_column1+ICON_column2+100, ICON_Width2, ICON_Height2)  </l>
<l>            area_center(ICON_Region2, ICON_Area, ICON_Row, ICON_Column)</l>
<c>          */////ICON 鋸齒檢測/////// </c>
<l>          threshold (Image_ICON, ICON_EdgeRegion00, Sawtooth_ICON1, Sawtooth_ICON2) //20//200</l>
<l>          opening_rectangle1(ICON_EdgeRegion00, Image_ICON01,Sawtooth_ICON3,Sawtooth_ICON3) //1</l>
<l>          opening_rectangle1(ICON_EdgeRegion00, Image_ICON02,Sawtooth_ICON4,Sawtooth_ICON4) //3</l>
<l>          symm_difference(Image_ICON01, Image_ICON02, ICON_Result)</l>
<l>          connection(ICON_Result, ICON_detect)</l>
<l>          select_shape (ICON_detect, ICON_detect_Selected, 'area', 'and', Sawtooth_ICON5, 3e+06) //5</l>
<c>          *//////////運算鋸齒位置///////////</c>
<l>          area_center(ICON_detect_Selected, Detect_Area, Detect_Row, Detect_Column)</l>
<l>          if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>             height_width_ratio(ICON_detect_Selected, RegionsHeight, RegionsWidth, RegionsRatio) </l>
<c>             *獲取區域數量</c>
<l>             count_obj(ICON_detect_Selected, RegionsNumber)</l>
<c>             *返回最小外接矩形(輸入區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>             smallest_rectangle1(ICON_detect_Selected, Row1, Column1, Row2, Column2)</l>
<c>             *產生最小外接矩形(畫出的區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>             gen_rectangle1(ICON_detect_Selected, Row1, Column1, Row2, Column2)</l>
<c>             *產生區域面積與中座標(畫出的區域，面積，(中心座標))</c>
<l>             area_center(ICON_detect_Selected, RegionsArea, RegionsCenterRow, RegionsCenterColumn)</l>
<l>             RegionsCenterRow:=RegionsCenterRow+ICON_row1+ICON_row2</l>
<l>             RegionsCenterColumn:=RegionsCenterColumn+ICON_column1+ICON_column2+100                             </l>
<c>*/////////////////////回傳值//////////////////////</c>
<l>            Print_data(Class2_Number, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY, Class2_height, Class2_width, RegionsNumber, RegionsHeight, RegionsWidth, RegionsRatio, RegionsArea, RegionsCenterRow, RegionsCenterColumn, Class2_Number_Out, Class2_Ratio_Out, Class2_area_Out, Class2_centerX_Out, Class2_centerY_Out, Class2_height_Out, Class2_width_Out, Class2_Number, Concat, Class2_height, Class2_width, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY)</l>
<l>          endif</l>
<c>          */////ICON 鋸齒檢測結束/////// </c>
<c>          */////ICON 內部檢測/////// </c>
<l>            area_center(Image_ICON, Detect_Area, Detect_Row, Detect_Column)</l>
<l>          if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>              threshold (Image_ICON, ICON_Inside, ICON_Inside_thres1, ICON_Inside_thres2) //200//255</l>
<l>              erosion_circle(ICON_Inside, ICON_Inside,4)</l>
<l>            area_center(ICON_Inside, Detect_Area, Detect_Row, Detect_Column)</l>
<l>            if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>              connection(ICON_Inside, ICON_Inside_detect)</l>
<l>              count_obj(ICON_Inside_detect, ICON_Inside_Number)</l>
<l>              for ICON_Inside_Index := 1 to ICON_Inside_Number  by 1 </l>
<l>                  select_obj(ICON_Inside_detect, ICON_Inside_Object, ICON_Inside_Index)</l>
<l>                  fill_up_shape(ICON_Inside_Object,ICON_Inside_Object,'area',0,ICON_Inside_Object_Area)</l>
<l>                  region_features(ICON_Inside_Object, 'row1', ICON_Inside_Object_row) </l>
<l>                  region_features(ICON_Inside_Object, 'column1', ICON_Inside_Object_column)</l>
<l>                  reduce_domain(Image_ICON,ICON_Inside_Object,Mask)</l>
<l>                  crop_domain(Mask, ImagePart_ICON_Inside)</l>
<c>                  *//////////ICON 內部影像處裡///////////</c>
<l>                  scale_image_max(ImagePart_ICON_Inside, ImagePart_ICON_Inside2)</l>
<l>                  erosion_circle(ImagePart_ICON_Inside2, ICON_Inside_RegionErosion, 3.5) //3.5</l>
<l>                  area_center(ICON_Inside_RegionErosion, Detect_Area, Detect_Row, Detect_Column)</l>
<l>                  if(Detect_Area!=[] and Detect_Area!=0)  </l>
<l>                    region_features(ICON_Inside_RegionErosion, 'row1', ICON_Inside_RegionErosion_row) </l>
<l>                    region_features(ICON_Inside_RegionErosion, 'column1', ICON_Inside_RegionErosion_column)</l>
<l>                    reduce_domain(ImagePart_ICON_Inside2,ICON_Inside_RegionErosion,Mask)</l>
<l>                    crop_domain(Mask, ImagePart_ICON_Inside3)</l>
<l>                    threshold (ImagePart_ICON_Inside3, ICON_Inside_detect4, ICON_Inside_thres3, ICON_Inside_thres4) //0//80</l>
<l>                    connection(ICON_Inside_detect4, ICON_Inside_Connected)</l>
<c>                    *//////////ICON 內部瑕疵位置///////////</c>
<l>                    area_center(ICON_Inside_Connected, Detect_Area, Detect_Row, Detect_Column)</l>
<l>                    if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>                      height_width_ratio(ICON_Inside_Connected, RegionsHeight, RegionsWidth, RegionsRatio) </l>
<c>                      *獲取區域數量</c>
<l>                      count_obj(ICON_Inside_Connected, RegionsNumber)</l>
<c>                      *返回最小外接矩形(輸入區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>                      smallest_rectangle1(ICON_Inside_Connected, Row1, Column1, Row2, Column2)</l>
<c>                      *產生最小外接矩形(畫出的區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>                      gen_rectangle1(ICON_Inside_Connected, Row1, Column1, Row2, Column2)</l>
<c>                      *產生區域面積與中座標(畫出的區域，面積，(中心座標))</c>
<l>                      area_center(ICON_Inside_Connected, RegionsArea, RegionsCenterRow, RegionsCenterColumn)</l>
<l>                      RegionsCenterRow:=RegionsCenterRow+ICON_Inside_Object_row+ICON_row1+ICON_row2+ICON_Inside_RegionErosion_row</l>
<l>                      RegionsCenterColumn:=RegionsCenterColumn+ICON_Inside_Object_column+ICON_column1+ICON_column2+100+ICON_Inside_RegionErosion_column                             </l>
<c>               */////////////////////回傳值//////////////////////</c>
<l>                      Print_data(Class2_Number, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY, Class2_height, Class2_width, RegionsNumber, RegionsHeight, RegionsWidth, RegionsRatio, RegionsArea, RegionsCenterRow, RegionsCenterColumn, Class2_Number_Out, Class2_Ratio_Out, Class2_area_Out, Class2_centerX_Out, Class2_centerY_Out, Class2_height_Out, Class2_width_Out, Class2_Number, Concat, Class2_height, Class2_width, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY)</l>
<l>                    endif                      </l>
<l>                  endif</l>
<l>              endfor </l>
<l>            endif</l>
<l>          endif</l>
<l>        endif</l>
<c>       */////////ICON 內部檢測結束/////////  </c>
<l>  endif</l>
<c>      */////Black 漏光檢測///////  </c>
<l>      region_features(Black_ObjectSelected, 'row1', Black_Object_row) </l>
<l>      region_features(Black_ObjectSelected, 'column1', Black_Object_column)</l>
<l>      reduce_domain(Source_Pic,Black_ObjectSelected,Mask)</l>
<l>      crop_domain(Mask, ImagePart)    </l>
<l>      threshold (ImagePart, Black_detect, Black_thres1, Black_thres2) //40//255</l>
<l>      connection(Black_detect, Black_Connected) </l>
<l>      if(ICON_Detect_Area=0)</l>
<l>        select_shape (Black_Connected, Black_detect_Selected, 'area', 'and', 0, Black_thres3) //1000000</l>
<l>      elseif(ICON_Detect_Area!=0)</l>
<l>        select_shape (Black_Connected, Black_detect_Selected, 'area', 'and', 0, Black_thres4) //2000         </l>
<l>      endif</l>
<c>      *//////////運算漏光位置///////////</c>
<l>      area_center(Black_detect_Selected, Detect_Area, Detect_Row, Detect_Column)</l>
<l>    if(Detect_Area!=[] and Detect_Area!=0)</l>
<l>       height_width_ratio(Black_detect_Selected, RegionsHeight, RegionsWidth, RegionsRatio) </l>
<c>       *獲取區域數量</c>
<l>       count_obj(Black_detect_Selected, RegionsNumber)</l>
<c>       *返回最小外接矩形(輸入區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>       smallest_rectangle1(Black_detect_Selected, Row1, Column1, Row2, Column2)</l>
<c>       *產生最小外接矩形(畫出的區域，(矩形左上角座標)，(矩形右下角座標))</c>
<l>       gen_rectangle1(Black_detect_Selected, Row1, Column1, Row2, Column2)</l>
<c>       *產生區域面積與中座標(畫出的區域，面積，(中心座標))</c>
<l>       area_center(Black_detect_Selected, RegionsArea, RegionsCenterRow, RegionsCenterColumn)</l>
<l>       RegionsCenterRow:=RegionsCenterRow+Black_Object_row</l>
<l>       RegionsCenterColumn:=RegionsCenterColumn+Black_Object_column</l>
<c>*/////////////////////回傳值//////////////////////</c>
<l>      Print_data(Class2_Number, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY, Class2_height, Class2_width, RegionsNumber, RegionsHeight, RegionsWidth, RegionsRatio, RegionsArea, RegionsCenterRow, RegionsCenterColumn, Class2_Number_Out, Class2_Ratio_Out, Class2_area_Out, Class2_centerX_Out, Class2_centerY_Out, Class2_height_Out, Class2_width_Out, Class2_Number, Concat, Class2_height, Class2_width, Class2_Ratio, Class2_area, Class2_centerX, Class2_centerY)</l>
<l>    endif</l>
<c>    */////漏光檢測結束/////// </c>
<l>    endfor</l>
<l>  endif     </l>
<c>*/////////////////////////////////////////////////////////////////////////////////</c>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="close_fill_select_shape">
<interface>
<io>
<par name="Region" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="RegionClosing" base_type="iconic" dimension="0"/>
<par name="RegionFillUp" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
<par name="SelectedRegions" base_type="iconic" dimension="0"/>
<par name="SelectedRegion0" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="closing_circle_para" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>closing_circle(Region, RegionClosing,closing_circle_para)</l>
<l>fill_up(RegionClosing, RegionFillUp)</l>
<l>connection (RegionFillUp, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 65000, 3e+06)</l>
<l>select_shape (SelectedRegions, SelectedRegion0, 'rectangularity', 'and', 0.18, 1)</l>
<l>* dilation_circle(SelectedRegion0, SelectedRegion0, 5)</l>
<l>return ()</l>
</body>
<docu id="close_fill_select_shape">
<parameters>
<parameter id="ConnectedRegions"/>
<parameter id="Region"/>
<parameter id="RegionClosing"/>
<parameter id="RegionFillUp"/>
<parameter id="SelectedRegion0"/>
<parameter id="SelectedRegions"/>
<parameter id="closing_circle_para"/>
</parameters>
</docu>
</procedure>
<procedure name="symm_select_shape">
<interface>
<io>
<par name="Pic_size" base_type="iconic" dimension="0"/>
<par name="SelectedRegion0" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ROI_0" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions1" base_type="iconic" dimension="0"/>
<par name="SelectedRegion1" base_type="iconic" dimension="0"/>
<par name="SelectedRegion2" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>symm_difference (Pic_size, SelectedRegion0, ROI_0)</l>
<l>connection(ROI_0, ConnectedRegions1)</l>
<l>select_shape (ConnectedRegions1, SelectedRegion1, 'area', 'and', 37000, 3e+06)</l>
<l>select_shape (SelectedRegion1, SelectedRegion2, 'rectangularity', 'and', 0.8, 1)</l>
<l>return ()</l>
</body>
<docu id="symm_select_shape">
<parameters>
<parameter id="ConnectedRegions1"/>
<parameter id="Pic_size"/>
<parameter id="ROI_0"/>
<parameter id="SelectedRegion0"/>
<parameter id="SelectedRegion1"/>
<parameter id="SelectedRegion2"/>
</parameters>
</docu>
</procedure>
<procedure name="Log_Black">
<interface>
<io>
<par name="SelectedRegion0" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ObjectSelected1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Index" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Area_Black1" base_type="ctrl" dimension="0"/>
<par name="Row_Black1" base_type="ctrl" dimension="0"/>
<par name="Column_Black1" base_type="ctrl" dimension="0"/>
<par name="Height_Black1" base_type="ctrl" dimension="0"/>
<par name="Width_Black1" base_type="ctrl" dimension="0"/>
<par name="Ratio_Black1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    select_obj(SelectedRegion0, ObjectSelected1, Index)</l>
<l>    area_center(ObjectSelected1, Area_Black1, Row_Black1, Column_Black1)</l>
<l>    height_width_ratio (ObjectSelected1, Height_Black1, Width_Black1, Ratio_Black1)</l>
<l>return ()</l>
</body>
<docu id="Log_Black">
<parameters>
<parameter id="Area_Black1"/>
<parameter id="Column_Black1"/>
<parameter id="Height_Black1"/>
<parameter id="Index"/>
<parameter id="ObjectSelected1"/>
<parameter id="Ratio_Black1"/>
<parameter id="Row_Black1"/>
<parameter id="SelectedRegion0"/>
<parameter id="Width_Black1"/>
</parameters>
</docu>
</procedure>
<procedure name="Log_White">
<interface>
<io>
<par name="SelectedRegion2" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="White_ObjectSelected" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="White_Index" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Height_White" base_type="ctrl" dimension="0"/>
<par name="Width_White" base_type="ctrl" dimension="0"/>
<par name="Ratio_White" base_type="ctrl" dimension="0"/>
<par name="Area_Selected" base_type="ctrl" dimension="0"/>
<par name="Row_White" base_type="ctrl" dimension="0"/>
<par name="Column_White" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    select_obj(SelectedRegion2, White_ObjectSelected, White_Index)</l>
<l>    height_width_ratio (White_ObjectSelected, Height_White, Width_White, Ratio_White)</l>
<l>    area_center(White_ObjectSelected, Area_Selected, Row_White, Column_White)</l>
<l>return ()</l>
</body>
<docu id="Log_White">
<parameters>
<parameter id="Area_Selected"/>
<parameter id="Column_White"/>
<parameter id="Height_White"/>
<parameter id="Ratio_White"/>
<parameter id="Row_White"/>
<parameter id="SelectedRegion2"/>
<parameter id="White_Index"/>
<parameter id="White_ObjectSelected"/>
<parameter id="Width_White"/>
</parameters>
</docu>
</procedure>
<procedure name="Region_Image_sawtooth">
<interface>
<io>
<par name="White_ObjectSelected" base_type="iconic" dimension="0"/>
<par name="ImageScaleMax" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ROI_sawtooth" base_type="iconic" dimension="0"/>
<par name="ROI_sawtooth1" base_type="iconic" dimension="0"/>
<par name="ROI_sawtooth2" base_type="iconic" dimension="0"/>
<par name="sawtooh_Region" base_type="iconic" dimension="0"/>
<par name="Mask" base_type="iconic" dimension="0"/>
<par name="Image_sawtooth" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="smallest_Row" base_type="ctrl" dimension="0"/>
<par name="smallest_Column" base_type="ctrl" dimension="0"/>
<par name="smallest_Phi" base_type="ctrl" dimension="0"/>
<par name="smallest_Length1" base_type="ctrl" dimension="0"/>
<par name="smallest_Length2" base_type="ctrl" dimension="0"/>
<par name="sawtooh_ObjectSelect_row" base_type="ctrl" dimension="0"/>
<par name="sawtooh_ObjectSelect_column" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    smallest_rectangle2(White_ObjectSelected, smallest_Row, smallest_Column, smallest_Phi, smallest_Length1, smallest_Length2)</l>
<l>    gen_rectangle2(ROI_sawtooth, (smallest_Row), (smallest_Column), smallest_Phi, (smallest_Length1), (smallest_Length2))</l>
<l>    erosion_circle(ROI_sawtooth, ROI_sawtooth1, 50)</l>
<l>    dilation_circle (ROI_sawtooth, ROI_sawtooth2, 50)</l>
<l>    symm_difference(ROI_sawtooth1, ROI_sawtooth2, sawtooh_Region)</l>
<l>    reduce_domain (ImageScaleMax, sawtooh_Region, Mask)</l>
<l>    region_features(sawtooh_Region, 'row1', sawtooh_ObjectSelect_row)</l>
<l>    region_features(sawtooh_Region, 'column1', sawtooh_ObjectSelect_column)</l>
<l>    crop_domain(Mask, Image_sawtooth)</l>
<l>return ()</l>
</body>
<docu id="Region_Image_sawtooth">
<parameters>
<parameter id="ImageScaleMax"/>
<parameter id="Image_sawtooth"/>
<parameter id="Mask"/>
<parameter id="ROI_sawtooth"/>
<parameter id="ROI_sawtooth1"/>
<parameter id="ROI_sawtooth2"/>
<parameter id="White_ObjectSelected"/>
<parameter id="sawtooh_ObjectSelect_column"/>
<parameter id="sawtooh_ObjectSelect_row"/>
<parameter id="sawtooh_Region"/>
<parameter id="smallest_Column"/>
<parameter id="smallest_Length1"/>
<parameter id="smallest_Length2"/>
<parameter id="smallest_Phi"/>
<parameter id="smallest_Row"/>
</parameters>
</docu>
</procedure>
<procedure name="Print_Data">
<interface>
<ic>
<par name="Class2_Number" base_type="ctrl" dimension="0"/>
<par name="RegionsNumber" base_type="ctrl" dimension="0"/>
<par name="Class2_height" base_type="ctrl" dimension="0"/>
<par name="RegionsHeight" base_type="ctrl" dimension="0"/>
<par name="Class2_width" base_type="ctrl" dimension="0"/>
<par name="RegionsWidth" base_type="ctrl" dimension="0"/>
<par name="Class2_Ratio" base_type="ctrl" dimension="0"/>
<par name="RegionsRatio" base_type="ctrl" dimension="0"/>
<par name="Class2_area" base_type="ctrl" dimension="0"/>
<par name="RegionsArea" base_type="ctrl" dimension="0"/>
<par name="Class2_centerX" base_type="ctrl" dimension="0"/>
<par name="RegionsCenterRow" base_type="ctrl" dimension="0"/>
<par name="Class2_centerY" base_type="ctrl" dimension="0"/>
<par name="RegionsCenterColumn" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Class2_Number_WhiteOut" base_type="ctrl" dimension="0"/>
<par name="Concat" base_type="ctrl" dimension="0"/>
<par name="Class2_height_WhiteOut" base_type="ctrl" dimension="0"/>
<par name="Class2_width_WhiteOut" base_type="ctrl" dimension="0"/>
<par name="Class2_Ratio_WhiteOut" base_type="ctrl" dimension="0"/>
<par name="Class2_area_WhiteOut" base_type="ctrl" dimension="0"/>
<par name="Class2_centerX_WhiteOut" base_type="ctrl" dimension="0"/>
<par name="Class2_centerY_WhiteOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Class2_Number_WhiteOut := Class2_Number</l>
<l>Class2_Ratio_WhiteOut := Class2_Ratio</l>
<l>Class2_area_WhiteOut := Class2_area</l>
<l>Class2_centerX_WhiteOut := Class2_centerX</l>
<l>Class2_centerY_WhiteOut := Class2_centerY</l>
<l>Class2_height_WhiteOut := Class2_height</l>
<l>Class2_width_WhiteOut := Class2_width</l>
<l>            Class2_Number := Class2_Number_WhiteOut+RegionsNumber</l>
<l>            tuple_concat (Class2_height_WhiteOut, RegionsHeight, Concat)</l>
<l>            Class2_height := Concat</l>
<l>            tuple_concat (Class2_width_WhiteOut, RegionsWidth, Concat)</l>
<l>            Class2_width := Concat</l>
<l>            tuple_concat (Class2_Ratio_WhiteOut, RegionsRatio, Concat)</l>
<l>            Class2_Ratio := Concat</l>
<l>            tuple_concat (Class2_area_WhiteOut, RegionsArea, Concat)</l>
<l>            Class2_area := Concat</l>
<l>            tuple_concat (Class2_centerX_WhiteOut, RegionsCenterRow, Concat)</l>
<l>            Class2_centerX := Concat</l>
<l>            tuple_concat (Class2_centerY_WhiteOut, RegionsCenterColumn, Concat)</l>
<l>            Class2_centerY := Concat</l>
<l>return ()</l>
</body>
<docu id="Print_Data">
<parameters>
<parameter id="Class2_Number"/>
<parameter id="Class2_Number_WhiteOut"/>
<parameter id="Class2_Ratio"/>
<parameter id="Class2_Ratio_WhiteOut"/>
<parameter id="Class2_area"/>
<parameter id="Class2_area_WhiteOut"/>
<parameter id="Class2_centerX"/>
<parameter id="Class2_centerX_WhiteOut"/>
<parameter id="Class2_centerY"/>
<parameter id="Class2_centerY_WhiteOut"/>
<parameter id="Class2_height"/>
<parameter id="Class2_height_WhiteOut"/>
<parameter id="Class2_width"/>
<parameter id="Class2_width_WhiteOut"/>
<parameter id="Concat"/>
<parameter id="RegionsArea"/>
<parameter id="RegionsCenterColumn"/>
<parameter id="RegionsCenterRow"/>
<parameter id="RegionsHeight"/>
<parameter id="RegionsNumber"/>
<parameter id="RegionsRatio"/>
<parameter id="RegionsWidth"/>
</parameters>
</docu>
</procedure>
<procedure name="Print_data">
<interface>
<ic>
<par name="Class2_Number" base_type="ctrl" dimension="0"/>
<par name="Class2_Ratio" base_type="ctrl" dimension="0"/>
<par name="Class2_area" base_type="ctrl" dimension="0"/>
<par name="Class2_centerX" base_type="ctrl" dimension="0"/>
<par name="Class2_centerY" base_type="ctrl" dimension="0"/>
<par name="Class2_height" base_type="ctrl" dimension="0"/>
<par name="Class2_width" base_type="ctrl" dimension="0"/>
<par name="RegionsNumber" base_type="ctrl" dimension="0"/>
<par name="RegionsHeight" base_type="ctrl" dimension="0"/>
<par name="RegionsWidth" base_type="ctrl" dimension="0"/>
<par name="RegionsRatio" base_type="ctrl" dimension="0"/>
<par name="RegionsArea" base_type="ctrl" dimension="0"/>
<par name="RegionsCenterRow" base_type="ctrl" dimension="0"/>
<par name="RegionsCenterColumn" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Class2_Number_Out" base_type="ctrl" dimension="0"/>
<par name="Class2_Ratio_Out" base_type="ctrl" dimension="0"/>
<par name="Class2_area_Out" base_type="ctrl" dimension="0"/>
<par name="Class2_centerX_Out" base_type="ctrl" dimension="0"/>
<par name="Class2_centerY_Out" base_type="ctrl" dimension="0"/>
<par name="Class2_height_Out" base_type="ctrl" dimension="0"/>
<par name="Class2_width_Out" base_type="ctrl" dimension="0"/>
<par name="Class2_NumberOut" base_type="ctrl" dimension="0"/>
<par name="Concat" base_type="ctrl" dimension="0"/>
<par name="Class2_heightOut" base_type="ctrl" dimension="0"/>
<par name="Class2_widthOut" base_type="ctrl" dimension="0"/>
<par name="Class2_RatioOut" base_type="ctrl" dimension="0"/>
<par name="Class2_areaOut" base_type="ctrl" dimension="0"/>
<par name="Class2_centerXOut" base_type="ctrl" dimension="0"/>
<par name="Class2_centerYOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Class2_NumberOut := Class2_Number</l>
<l>Class2_RatioOut := Class2_Ratio</l>
<l>Class2_areaOut := Class2_area</l>
<l>Class2_centerXOut := Class2_centerX</l>
<l>Class2_centerYOut := Class2_centerY</l>
<l>Class2_heightOut := Class2_height</l>
<l>Class2_widthOut := Class2_width</l>
<l>                Class2_Number_Out := Class2_NumberOut</l>
<l>                Class2_Ratio_Out := Class2_RatioOut</l>
<l>                Class2_area_Out := Class2_areaOut</l>
<l>                Class2_centerX_Out := Class2_centerXOut</l>
<l>                Class2_centerY_Out := Class2_centerYOut</l>
<l>                Class2_height_Out := Class2_heightOut</l>
<l>                Class2_width_Out := Class2_widthOut</l>
<l>                Class2_NumberOut := Class2_Number_Out+RegionsNumber</l>
<l>            tuple_concat (Class2_height_Out, RegionsHeight, Concat)</l>
<l>                Class2_heightOut := Concat</l>
<l>            tuple_concat (Class2_width_Out, RegionsWidth, Concat)</l>
<l>                Class2_widthOut := Concat</l>
<l>            tuple_concat (Class2_Ratio_Out, RegionsRatio, Concat)</l>
<l>                Class2_RatioOut := Concat</l>
<l>            tuple_concat (Class2_area_Out, RegionsArea, Concat)</l>
<l>                Class2_areaOut := Concat</l>
<l>            tuple_concat (Class2_centerX_Out, RegionsCenterRow, Concat)</l>
<l>                Class2_centerXOut := Concat</l>
<l>            tuple_concat (Class2_centerY_Out, RegionsCenterColumn, Concat)</l>
<l>                Class2_centerYOut := Concat</l>
<l>return ()</l>
</body>
<docu id="Print_data">
<parameters>
<parameter id="Class2_Number"/>
<parameter id="Class2_NumberOut"/>
<parameter id="Class2_Number_Out"/>
<parameter id="Class2_Ratio"/>
<parameter id="Class2_RatioOut"/>
<parameter id="Class2_Ratio_Out"/>
<parameter id="Class2_area"/>
<parameter id="Class2_areaOut"/>
<parameter id="Class2_area_Out"/>
<parameter id="Class2_centerX"/>
<parameter id="Class2_centerXOut"/>
<parameter id="Class2_centerX_Out"/>
<parameter id="Class2_centerY"/>
<parameter id="Class2_centerYOut"/>
<parameter id="Class2_centerY_Out"/>
<parameter id="Class2_height"/>
<parameter id="Class2_heightOut"/>
<parameter id="Class2_height_Out"/>
<parameter id="Class2_width"/>
<parameter id="Class2_widthOut"/>
<parameter id="Class2_width_Out"/>
<parameter id="Concat"/>
<parameter id="RegionsArea"/>
<parameter id="RegionsCenterColumn"/>
<parameter id="RegionsCenterRow"/>
<parameter id="RegionsHeight"/>
<parameter id="RegionsNumber"/>
<parameter id="RegionsRatio"/>
<parameter id="RegionsWidth"/>
</parameters>
</docu>
</procedure>
</hdevelop>
